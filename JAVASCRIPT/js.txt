JAVASCRIPT
--It is a programming language
--Makes interactivity in web page

Connection Methods
--Inline 

<h1 onlick="alert("You clicked H1 tag")"></h1>

--Internal

<script>
alert('Hii')
</script>

--External

Separate js file
alert("Hello js")
in HTML
<script src="index.js"></script>

Variables
--Var
--Let
--Const

Scope
--Global Scope
--Functional Scope
--Block scope

Hoisting
--Variables and functions declaration are moved to the top of the scope during compilation phase

Let
--Block scoped
--Cannot redeclare 
--can reassign
--Cannot be hoisted

Const
--Block scoped
--Cannot be redeclare and reassign
--Cannot be hoisted

Var
--Functional Scope
--Can redeclare and reassign
--Hoisted



DATA TYPES
--For Different Problems..we use Different Data types
--Two
----Primitive
----Non Primitive

PRIMIITIVE
    --Number (20,50,3.2)
    --String ("Hello Akaza")
    --Boolean  (true,false)
    --Undefined (Variable declared but no value yet)
    --Null (Intentional Nothing)
    --Symbol(unique value(Used Rarely))
    --BigInt



NON PRIMITIVE data types
    --Object {name:"Elan",age:25}
    --Array-[1,2,3]
    --Function ->function greet(){...}

    TYPES OF OPERATORS
    -Arithmetic OPERATORS(+-*/%==)

    let a=10,b=3;
    console.log(a+b)
    console.log(a-b)
    console.log(a*b)
    console.log(a/b)
    console.log(a%b)
    console.log(a**b)
    -Assignment OPERATORS

    -Logical OPERATORS

Loops
--For 
--While
--Do-While
--For in(Returns index of the elements)
--For of(Returns index of the elements)

Control Statements
----Conditional Statements
----Iterative Statements
--Break
--Continue
--Return

Conditional Statements
--If
--If-else
--Switch
--Ternary OPERATORS

Iterative Statements
--For
--While
--Do-While

functions
    It is a Block of code that can be reused whenever we want

    Syntax:
    function function_name(parameters){
        Statements;
    }
    function_name(arguments);

    TYPES OF functions

    Regular                 --Normal Function
    Anonymous function      --Without name
    Arrow                   --Single Line
    CallBack                --Callback Another Function
    Higher Order Function   --Returns a Function

    Anonymous Function 
            A function which is declared without a name 
            can be stored in a variable and Call it by printing the variable
            
    Arrow Function
            let variable=(parameters)=> expression;
            variable(arguments);

    CallBack Function
            function Callback(name,function){
                Return function(name) 
            }
    Higher Order Function
            Array
                Collection of Data
                Using Square Brackets
                index Starting feom 0
                can store multiple data types
                mutable
                have many builtin functions to modify
        WE CAN CREATE ARRAY USING CONSTRUCTORS
        new Array();

        push()-Add elements to the last
        pop()-Removes elements in the last
        unswift()-add element in first
        swift()-delete element in the first

        indexOf()-FInd index of the particular value
        if value not present -Returns -1
        includes()-Checks Data present in the array
        if not present in array- returns false

        Slice Vs Splice
        slice-used to copy the range of elements 
                -Wont affect the original Array
        splice -used to Add and Modify the Elements 
                -Returns the deleted Elements
                -It affects the original Array
                Syntax:
                splice(start_index,delete_count,replace_elements)
                Add element by Splice(start index,0,replace_elements)
                Remove Element by Splice(start_index,delete_count)
        Join
        -Converts ARRAY to String
        Split
        -Converts String to Array

        For Each
        --Inside Array module
        --It iterates into the array
        --Doesnt Return New Array
        --vehicles.forEach()

        Map
        --iterates all Elements
        --Returns array of Changed Elements
        --array.map(function)
        --(USE MOSTLY FOR MODIFY ELEMENTS)


        Filter
        --Stores in Array which elements are passed the required Condition 
        --Returns array of Passed Elements
        --array.filter(function)
        --(USE FOR SELECTING ELEMENTS BASED ON CONDITION)

        Reduce
        --array.Reduce(Function)
        --iterates through All Elements
        --Returns the aggregated answer(Single value)
        --(USE FOR AGGREGATE A ARRAY LIKE(SUM,COUNT,AVG))

