JAVASCRIPT
--It is a programming language
--Makes interactivity in web page

Connection Methods
--Inline 

<h1 onlick="alert("You clicked H1 tag")"></h1>

--Internal

<script>
alert('Hii')
</script>

--External

Separate js file
alert("Hello js")
in HTML
<script src="index.js"></script>

Variables
--Var
--Let
--Const

Scope
--Global Scope
--Functional Scope
--Block scope

Hoisting
--Variables and functions declaration are moved to the top of the scope during compilation phase

Let
--Block scoped
--Cannot redeclare 
--can reassign
--Cannot be hoisted

Const
--Block scoped
--Cannot be redeclare and reassign
--Cannot be hoisted

Var
--Functional Scope
--Can redeclare and reassign
--Hoisted



DATA TYPES
--For Different Problems..we use Different Data types
--Two
----Primitive
----Non Primitive

PRIMIITIVE
    --Number (20,50,3.2)
    --String ("Hello Akaza")
    --Boolean  (true,false)
    --Undefined (Variable declared but no value yet)
    --Null (Intentional Nothing)
    --Symbol(unique value(Used Rarely))
    --BigInt



NON PRIMITIVE data types
    --Object {name:"Elan",age:25}
    --Array-[1,2,3]
    --Function ->function greet(){...}

    TYPES OF OPERATORS
    -Arithmetic OPERATORS(+-*/%==)

    let a=10,b=3;
    console.log(a+b)
    console.log(a-b)
    console.log(a*b)
    console.log(a/b)
    console.log(a%b)
    console.log(a**b)
    -Assignment OPERATORS

    -Logical OPERATORS

Loops
--For 
--While
--Do-While
--For in(Returns index of the elements)
--For of(Returns index of the elements)

Control Statements
----Conditional Statements
----Iterative Statements
--Break
--Continue
--Return

Conditional Statements
--If
--If-else
--Switch
--Ternary OPERATORS

Iterative Statements
--For
--While
--Do-While

functions
    It is a Block of code that can be reused whenever we want

    Syntax:
    function function_name(parameters){
        Statements;
    }
    function_name(arguments);

    TYPES OF functions

    Regular                 --Normal Function
    Anonymous function      --Without name
    Arrow                   --Single Line
    CallBack                --Callback Another Function
    Higher Order Function   --Returns a Function

    Anonymous Function 
            A function which is declared without a name 
            can be stored in a variable and Call it by printing the variable
            
    Arrow Function
            let variable=(parameters)=> expression;
            variable(arguments);

    CallBack Function
            function Callback(name,function){
                Return function(name) 
            }
    Higher Order Function
            